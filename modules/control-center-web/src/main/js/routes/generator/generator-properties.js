/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

if (typeof window === 'undefined') {
    $dataStructures = require('../../helpers/data-structures');
}

function _addLeadingZero(numberStr, minSize) {
    if (typeof (numberStr) != 'string')
        numberStr = '' + numberStr;

    while (numberStr.length < minSize) {
        numberStr = '0' + numberStr;
    }

    return numberStr;
}

function _formatDate(date) {
    var dd = _addLeadingZero(date.getDate(), 2);
    var mm = _addLeadingZero(date.getMonth() + 1, 2);

    var yyyy = date.getFullYear();

    return mm + '/' + dd + '/' + yyyy + ' ' + _addLeadingZero(date.getHours(), 2) + ':' + _addLeadingZero(date.getMinutes(), 2);
}

$generatorCommon = {};

$generatorCommon.isDefined = function (v) {
    return !(v === undefined || v === null);
};

$generatorCommon.hasProperty = function (obj, props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            if (obj[propName])
                return true;
        }
    }

    return false;
};

$generatorCommon.mainComment = function mainComment() {
    return 'This configuration was generated by Ignite Control Center (' + _formatDate(new Date()) + ')';
};

$generatorCommon.builder = function () {
    var res = [];

    res.deep = 0;

    res.lineStart = true;

    res.datasources = [];

    res.append = function (s) {
        if (this.lineStart) {
            for (var i = 0; i < this.deep; i++)
                this.push('    ');

            this.lineStart = false;
        }

        this.push(s);

        return this;
    };

    res.line = function (s) {
        if (s)
            this.append(s);

        this.push('\n');
        this.lineStart = true;

        return this;
    };

    res.startBlock = function (s) {
        if (s)
            this.append(s);

        this.push('\n');
        this.lineStart = true;
        this.deep++;

        return this;
    };

    res.endBlock = function (s) {
        this.deep--;

        if (s)
            this.append(s);

        this.push('\n');
        this.lineStart = true;

        return this;
    };

    res.emptyLineIfNeeded = function () {
        if (this.needEmptyLine) {
            this.line();

            this.needEmptyLine = false;

            return true;
        }

        return false;
    };

    res.imports = {};

    res.importClass = function (clsName) {
        var fullClassName = $dataStructures.fullClassName(clsName);

        var dotIdx = fullClassName.lastIndexOf('.');

        var shortName = dotIdx > 0 ? fullClassName.substr(dotIdx + 1) : fullClassName;

        if (this.imports[shortName]) {
            if (this.imports[shortName] != fullClassName)
                return fullClassName; // Short class names conflict. Return full name.
        }
        else
            this.imports[shortName] = fullClassName;

        return shortName;
    };

    /**
     * @returns String with "java imports" section.
     */
    res.generateImports = function () {
        var res = [];

        for (var clsName in this.imports) {
            if (this.imports.hasOwnProperty(clsName) && this.imports[clsName].lastIndexOf('java.lang.', 0) != 0)
                res.push('import ' + this.imports[clsName] + ';');
        }

        res.sort();

        return res.join('\n')
    };

    return res;
};

function _classDescriptor(className, fields) {
    return {className: className, fields: fields}
}

$generatorCommon.EVICTION_POLICIES = {
    LRU: _classDescriptor('org.apache.ignite.cache.eviction.lru.LruEvictionPolicy',
        {batchSize: null, maxMemorySize: null, maxSize: null}),
    RND: _classDescriptor('org.apache.ignite.cache.eviction.random.RandomEvictionPolicy',
        {maxSize: null}),
    FIFO: _classDescriptor('org.apache.ignite.cache.eviction.fifo.FifoEvictionPolicy',
        {batchSize: null, maxMemorySize: null, maxSize: null}),
    SORTED: _classDescriptor('org.apache.ignite.cache.eviction.sorted.SortedEvictionPolicy',
        {batchSize: null, maxMemorySize: null, maxSize: null})
};

$generatorCommon.MARSHALLERS = {
    OptimizedMarshaller: _classDescriptor('org.apache.ignite.marshaller.optimized.OptimizedMarshaller',
        {poolSize: null, requireSerializable: null }),
    JdkMarshaller: _classDescriptor('org.apache.ignite.marshaller.jdk.JdkMarshaller', {})
};

$generatorCommon.KNOWN_CLASSES = {
    Oracle: _classDescriptor('org.apache.ignite.cache.store.jdbc.dialect.OracleDialect', {}),
    DB2: _classDescriptor('org.apache.ignite.cache.store.jdbc.dialect.DB2Dialect', {}),
    SQLServer: _classDescriptor('org.apache.ignite.cache.store.jdbc.dialect.SQLServerDialect', {}),
    MySQL: _classDescriptor('org.apache.ignite.cache.store.jdbc.dialect.MySQLDialect', {}),
    PostgreSQL: _classDescriptor('org.apache.ignite.cache.store.jdbc.dialect.BasicJdbcDialect', {}),
    H2: _classDescriptor('org.apache.ignite.cache.store.jdbc.dialect.H2Dialect', {})
};

$generatorCommon.DATA_SOURCES = {
    Oracle: 'oracle.jdbc.pool.OracleDataSource',
    DB2: 'com.ibm.db2.jcc.DB2ConnectionPoolDataSource',
    SQLServer: 'com.microsoft.sqlserver.jdbc.SQLServerDataSource',
    MySQL: 'com.mysql.jdbc.jdbc2.optional.MysqlDataSource',
    PostgreSQL: 'org.postgresql.ds.PGPoolingDataSource',
    H2: 'org.h2.jdbcx.JdbcDataSource'
};

$generatorCommon.STORE_FACTORIES = {
    CacheJdbcPojoStoreFactory: _classDescriptor('org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory',
        {dataSourceBean: null, dialect: {type: 'className'}}),
    CacheJdbcBlobStoreFactory: _classDescriptor('org.apache.ignite.cache.store.jdbc.CacheJdbcBlobStoreFactory',
        {user: null, dataSourceBean: null, initSchema: null, createTableQuery: null, loadQuery: null, insertQuery: null, updateQuery: null, deleteQuery: null}),
    CacheHibernateBlobStoreFactory: _classDescriptor('org.apache.ignite.cache.store.hibernate.CacheHibernateBlobStoreFactory',
        {hibernateProperties: {type: 'propertiesAsList', propVarName: 'props'}})
};

$generatorCommon.ATOMIC_CONFIGURATION = _classDescriptor('org.apache.ignite.configuration.AtomicConfiguration',
    {backups: null, cacheMode: {type: 'enum', enumClass: 'CacheMode'}, atomicSequenceReserveSize: null});

$generatorCommon.SWAP_SPACE_SPI = _classDescriptor('org.apache.ignite.spi.swapspace.file.FileSwapSpaceSpi',
    {baseDirectory: null, readStripesNumber: null, maximumSparsity: {type: 'float'}, maxWriteQueueSize: null, writeBufferSize: null});

$generatorCommon.TRANSACTION_CONFIGURATION = _classDescriptor('org.apache.ignite.configuration.TransactionConfiguration',
    {
        defaultTxConcurrency: {type: 'enum', enumClass: 'TransactionConcurrency'},
        transactionIsolation: {type: 'TransactionIsolation', setterName: 'defaultTxIsolation'},
        defaultTxTimeout: null,
        pessimisticTxLogLinger: null,
        pessimisticTxLogSize: null,
        txSerializableEnabled: null}
);

/**
 * Generate properties file with properties stubs for stores data sources.
 *
 * @param cluster Configuration to process.
 * @returns {string} Generated content.
 */
$generatorCommon.generateProperties = function (cluster) {
    var res = exports.builder();

    var datasources = [];

    if (cluster.caches && cluster.caches.length > 0) {
        _.forEach(cluster.caches, function (cache) {
            if (cache.cacheStoreFactory && cache.cacheStoreFactory.kind) {
                var storeFactory = cache.cacheStoreFactory[cache.cacheStoreFactory.kind];

                if (storeFactory.dialect) {
                    var beanId = storeFactory.dataSourceBean;

                    if (!_.contains(datasources, beanId)) {
                        datasources.push(beanId);

                        res.line(beanId + '.jdbc.url=YOUR_JDBC_URL');
                        res.line(beanId + '.jdbc.username=YOUR_USER_NAME');
                        res.line(beanId + '.jdbc.password=YOUR_PASSWORD');
                        res.line();
                    }
                }
            }
        });
    }

    if (datasources.length > 0)
        return '# ' + mainComment() + '\n\n' + res.join('');

    return undefined;
};

if (typeof window === 'undefined') {
    module.exports = $generatorCommon;
}
